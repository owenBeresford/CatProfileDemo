OB NOTES
====================
* To comply to GDPR, please only enter test data
* We want to trash data in heruko every 24h as a security measure
* We have no access constraints on the app
* Due to the request for speed, I may the mongo in passwordless mode (this is the first time in my life I have done that )
* My working knowledge of angular1 (2015) would would fight with anything using JS modules, typescript, es2020 etc
* I plan to say "this is very simple code", I will avoid spotting the issues that typescript is good for, by not writing them
* I really do not want to argue with webpack, babel or other build tools, not enough time
* oss-test-2022-08 https://git.heroku.com/oss-test-2022-08.git   maintenance is ON
* https://cloud.mongodb.com/v2/62e2f59fa4b692502023f380#clusters 
* mongo "mongodb+srv://cluster0.4phrrdq.mongodb.net/myFirstDatabase" --username test
* git@github.com:owenBeresford/OSStest.git
* The default face was taken from https://www.reshot.com/free-svg-icons/face/
* Interaction: I should spend more time on gender input.  In order to work with all theoretical options I am leaving this as a free text 
* Interaction: I should implement the images, think about best image size on mobile, maybe add team-logo-as-background feature
* User story: Ability to edit profiles isn't asked for retrospectively, I will skip it for now due to budget
* NOTE https://twitter.com/StackStatus #leSigh
* Interaction: Add the "arrow buttons" css, like on my site
* Interaction: Make the day picker nicer to use.
* interaction: Improve logo, maybe your company one 
* interaction: Make a better form validation, rather than that 2min "is it null" filter

* IOIO https://devcenter.heroku.com/articles/getting-started-with-nodejs?singlepage=true
* IOIO https://reactjs.org/docs/create-a-new-react-app.html
* IOIO https://github.com/rahmanfadhil/learn-express-mongoose 
* IOIO let tt2={ name:"TEST", dob:new Date(), team:"TEST", gender:"TEST", sports:[], about:"", interests:"", image:"" };
* IOIO https://spin.atomicobject.com/2020/08/17/cra-express-share-code/

OpenSponsorship Submission

Athlete Profile Input Form
Overview
In this task you'll be creating and deploying a simple, full-stack, responsive, single-page application in Node and Angular 1/ AngularJS (NOT Angular2+) or ReactJS.

If you have any questions email me at ron@opensponsorship.com.
Requirements
I would like you to create a multi-step or multi-screen athlete profile form that gathers standard demographic, sports and event data. Here is a list of data points and sports you might want to use:

Data Points
Name
Date of Birth
Location
Team (e.g. New York Giants)
Gender
Sports (Can Multiple)
About
Interests
Profile Image

Sports
Golf
Tennis
Cricket
Basketball
Baseball
American Football
Aquatics
Archery
Automobile Racing
Badminton
Beach Volleyball
Bobsleigh
Body Building
Boxing
Cross Country Running
Cross Country Skiing
Curling
Cycling
Darts
Decathlon
Down Hill Skiing
Equestrianism
eSports
Fencing
Field Hockey
Figure Skating
Gymnastics
Ice Hockey
Martial Arts
Mixed Martial Arts
Modern Pentathlon
Motorcycle Racing
Netball
Polo
Racquetball
Rowing
Rugby
Sailing
Softball
Shooting
Skateboarding
Skeet Shooting
Skeleton
Snow Boarding
Soccer (Football)
Squash
Surfing
Swimming
Track and Field
Here is a suggested organization of the form but use your best judgement and creativity:

Basic Info: name, sport, gender, date of birth
About: description, location, team etc
Summary: show the athlete a wrap-up screen with the info they added, and give them a way to go back and edit if there are any mistake
Submit: On submit, the payload should be sent to a simple end point which persists the profile. This should be saved to a simple free MongoDB instance, such as mongoAtlas.
Profile: A well styled profile displaying all the information gathered about the user
List: After submission I should see a list of all profiles I have created
Here are the requirements for the API

Node/Express
Mongoose ORM (MongoDB)
3 End Points - POST, GET, PUT
Request Param Validation - express-validator (Bonus Feature)
Please note:

This is a single-page application. There shouldn't be page reloads between screens.
Time limits
Please spend no more than 5-hours on this test. If you can't make it perfect in that time, don't worry, just send me what you've accomplished. This time does not necessarily start when you receive this test, we only ask that you put aside some time to dedicate to completing the challenge.

Please turn in your results within 72-hours of the prompt being given. If that falls during the weekend, then please turn it in by Monday.

Extensions are available, just ask!
Evaluation & priorities
Within your brief 5 hour time limit I hope you'll prioritize the following, in this order. Consider this an iterative process � get it working on sound principles first, then refine and polish as time allows.

Make it work!
Clean and clear code (hopefully you didn't sacrifice this to make it work)
Project organization
Planning: tools used, implementation strategy, basic UX concerns like what to ask for where
Make it look good - just use Bootstrap, a Material theme, or whatever you're comfortable with
Management of data, state, and events internally
Code quality details - Type, variable, property checking - Failing fast, for better debugging
Extra polish, concern and care will be noticed
Less important details:

How you host your project. Please consider a simple cheap (or free) host like Heroku.
Tests are great, but I doubt you'll have time.
Delivery of project
Please place your finished source code on GitHub
Please host your finished application somewhere (Heroku)
Email me the repository URL and application URL
If for some reason you would rather not have your code or application out in the open, please send me a zip file of the source code and instructions on to launch and view the finished application.
Wrap up
When you've finished the test let me know by email: ishveen@opensponsorship.com

We will then schedule a short wrap up call to go over your results and the thinking you applied to this project.

Hints
Be efficient! Please don�t reinvent the wheel, use [generators]and other tools when they speed up your process and get you to your end goal faster.

