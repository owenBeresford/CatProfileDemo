// ***** This is a very rushed API ********
import {  UseThisModel } from '../models/AthletesModel'; 
import express, { Request,Response, Application } from "express";
import { Athlete, KeysOfAthlete, isAthlete } from '../types/Athlete';

interface IdTagged {
  ID: string;
}
type JsonBody=string;
type AthleteRequest= Request<unknown, JsonBody|null, unknown, IdTagged>;

const mongo=UseThisModel();

export function setUp(app:Application) {
	app.get("/api/athlete/all", getAll);
	app.get("/api/athlete/:ID", getSingle); 
	app.post("/api/athlete/", postSingle);
	app.patch("/api/athlete/:ID", patchSingle);

}

function getAll(req:Request, res:Response) {
  try {
	  res.status(200).json(mongo.getAll());
  } catch(e) { res.status(500); }
}

function getSingle(req:Request, res:Response) {
  console.log("recieved GET single athlete data with id"+req.query.ID);

  let ret=mongo.get(req.query.ID as string);
  if(ret) { res.status(200).json( ret); }
  else { res.status(404).send("Not found."); }
}
 
function postSingle(req:Request, res:Response) {
  console.log("recieved POST all data");

  let tt= JSON.parse(req.body);
  // better validation is done by mongoose schema; this just checks the payload was for this API 
  if( isAthlete(tt)) {  
    let ret=mongo.post( tt as Athlete); 
    if( !ret) { res.status(500).send("Something broke, add debug."); }
    else { res.status(204).send("Made new Athlete."); }
  } else { 
    res.status(400).send("Bad data for an athlete");
  }
}

function patchSingle(req:Request, res:Response) {
  console.log("recieved PATCH data");

  try {
    let tt= JSON.parse(req.body as string);
    if( isAthlete(tt)) {  
        let ret=mongo.patch(req.query.ID as string, tt as Athlete); 
        if( !ret) { res.status(500).send("Something broke, add debug."); }
    // Data will need to be pulled back to client... so 202
        else { res.status(202).send("Updated Athlete."); } 
    } else { 
      res.status(400).send("Bad data for an athlete");
    }
  } catch(e) {
    res.status(400).send("Bad data for an athlete");
  }
}

