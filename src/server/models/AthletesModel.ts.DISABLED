
import mongoose, { Connection, Schema, Model, Document } from 'mongoose';
import { Athlete, KeysOfAthlete, AthleteDocument, AthleteModel, AthleteDump } from '../types/Athlete';

function accessString():string {
    if( ! ('IMPORTED_ENV' in process.env)) {
        throw new Error("Load critical dependancy '.env*' as early in process as possible");
    } 
    return 'mongodb+srv://'+
    process.env.MONGODB_USERNAME+':'+
    process.env.MONGODB_PASSWORD+'@'+
    process.env.MONGODB_HOST+'/'+
    process.env.MONGODB_DATABASE+
    '?retryWrites=true';
} 

// split into files; assert( most systems have more than 1 schema)
const ATHLETE_SCHEMA:Schema =new Schema({
    // _id is absent on purpose
    name:{ type: String, index: true, required: true, trim:true }, 
    dob:{ type:Date, required:true }, 
    team: { type: String, index: true, required: true, trim:true  }, 
    gender: { type: String, required: true }, 
    sports: { type: [String], required: true }, 
    about:{ type: String, required: true, minlength: 5, trim:true }, 
    interests:{ type: String, required: true, minlength: 5, trim:true }, 
    image:{ type: String }
		} as const, { collection: "athletes" });
 
//  model<T>(name: string, schema?: Schema<T>, collection?: string, options?: CompileModelOptions): Model<T>;
export class AthleteWrapper {
    private conn:Connection ;
    private list:AthleteModel;

    constructor(db:Connection, sch:Schema ) {
        this.conn=db;
        /*
        (err)=>{
    if(err) { 
        console.error("Error conecting to Mongo", err );
        process.exit(1);
    }}
        */
        this.list = <AthleteModel>mongoose.model('athletes', sch );
    }

    async get(id:string):Promise<Athlete|null> {
        return new Promise( (good, bad) => {
            let tt=this.list.findOne({_id:id}).select( KeysOfAthlete.join(' ')).lean();
            // if observe null return
            let tmp2:Athlete= tt as unknown as Athlete; 
            good(tmp2);
        });
    }

    async getAll( ):Promise<Array<Athlete>> {
        return new Promise( (good, bad) => {
            let bigObject= this.list.find({}).select( KeysOfAthlete.join(' '));
console.log("WWW", typeof bigObject );            
            let data=bigObject.lean();
console.log("WWW", typeof data );            

            // I haven't been able to find a length/ count function
            if( data.length===0) { bad(new Error("No data found")); }
console.log("WWW", Object.keys(data) ); 
            let out: Array<Athlete>=[];
            data.forEach((val:unknown, i:unknown )=> {
console.log("WWW", val, i); 
                if( val === null ) { return; }
                let tmp2:Athlete= val as unknown as Athlete; 
                if(tmp2.ID) { // will have a value, PK for mongo
                    tmp2.ID=tmp2.ID.toString();
                }
                if( typeof tmp2['dob'] === 'object') { 
                    tmp2['dob']=(tmp2['dob'] as Date).getTime() ?? 0;
                }
                out.push(tmp2);
            } );
            good(out);  
         });
     }

    async post( dat:Athlete):Promise<boolean> {
        return new Promise((good, bad )=> {
            let doc=new this.list( dat);
            doc.save(); // how do I check for errors
            good(true);
        });
    } 

    async patch(ID:string, dat:Athlete):Promise<boolean> {
        dat.ID=ID;
        return new Promise( (good, bad) => {
            this.list.findOneAndUpdate(
            { _id: ID }, 
            { dat },
            );
            good(true);
        });
   }
}

let MODEL:AthleteWrapper|null=null;
export function UseThisModel():AthleteWrapper {
    if(!MODEL) {
        mongoose.set('debug', { color: false, shell: true } );
        // this database is tiny
        mongoose.set('bufferTimeoutMS', 500);
        MODEL=new AthleteWrapper( mongoose.createConnection(accessString()), ATHLETE_SCHEMA );
    }
    return MODEL;
}
 
